[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "imas-standard-interfaces"
dynamic = ["version"]
description = "NetCDF schemas and examples for tokamak data interfaces"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    # "imas-standard-names",  # TODO: Add as a dependency when available on GitHub
    "jsonschema>=4.0.0",
    "netcdf4>=1.7.2",
    "xarray>=2023.1.0",
    "xarray-schema>=0.0.3",
]

[dependency-groups]
dev = [
    "build>=1.2.2.post1",
    "hatchling>=1.27.0",
    "hatch-vcs>=0.3.0",
    "ipykernel",
    "pytest>=7.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "pytest-benchmark>=4.0.0",
    "pytest-watch>=4.2.0",
]
docs = [
    "click>=8.2.1",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mike>=2.0.0",
    "mkdocs-awesome-pages-plugin>=2.9.0",
    "pymdown-extensions>=10.0.0",
    "json-schema-for-humans>=0.47.0",
    "rich>=14.0.0",
]

[tool.hatch.build.targets.wheel]
packages = ["standard_interfaces"]

[tool.hatch.build.targets.wheel.shared-data]
"schemas" = "standard_interfaces/schemas"
"definitions" = "standard_interfaces/definitions"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "standard_interfaces/_version.py"

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["win-64", "linux-64", "osx-64"]

[tool.pixi.dependencies]
libnetcdf = "*" # Provides ncgen utility for CDL to NetCDF conversion

[tool.pixi.pypi-dependencies]
imas-standard-interfaces = { path = ".", editable = true }
imas-standard-names = { path = "../imas-standard-names" }

[tool.uv.sources]
imas-standard-names = { path = "../imas-standard-names" }

[tool.pixi.environments]
default = { features = ["dev", "docs"], solve-group = "default" }

[tool.pixi.activation]
env = { PYTHONIOENCODING = "utf-8", PYTHONUTF8 = "1" }

[tool.pixi.tasks]
test = "pytest"
test-verbose = "pytest -v"
test-coverage = "pytest --cov=standard_interfaces --cov-report=term-missing --cov-report=html"

# System dependencies note:
# This package requires ncgen (NetCDF utilities) for CDL file processing.
# The libnetcdf package includes the ncgen utility.
# Alternative installation methods for ncgen:
# - Ubuntu/Debian: sudo apt-get install netcdf-bin
# - RHEL/CentOS: sudo yum install netcdf
# - macOS: brew install netcdf
# - Windows: Install from https://www.unidata.ucar.edu/software/netcdf/

[tool.pytest.ini_options]
# Test discovery
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Minimum version
minversion = "7.0"

# Minimal output options for continuous testing
addopts = [
    "--tb=short",       # Short traceback format
    "--strict-markers", # Treat unregistered markers as errors
    "--no-header",      # No header for cleaner output
    "-q",               # Quiet mode for continuous testing
]

# Markers for categorizing tests
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (slower, may require external resources)",
    "slow: Slow tests (may take several seconds)",
    "network: Tests that require network access",
    "file_io: Tests that perform file I/O operations",
    "schema: Schema validation tests",
    "geometry: Geometry-related tests",
    "pydantic: Pydantic model validation tests",
]

# Test filtering
filterwarnings = [
    "error",                             # Treat warnings as errors
    "ignore::UserWarning",               # Ignore user warnings
    "ignore::DeprecationWarning",        # Ignore deprecation warnings from dependencies
    "ignore::PendingDeprecationWarning",
]

# Add coverage configuration
[tool.coverage.run]
source = ["standard_interfaces"]
omit = ["*/tests/*", "*/test_*", "*/_version.py", "*/conftest.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
